Vue

- Declarative Rendering using template syntax

- Basic Example
	```
	<div id="app">
		{{ message }}
	</div>

	var app = new Vue({
		el: '#app',
		data: {
			message: 'Hello Vue!'
		}
	})
	```


- bind element attributes using v-bind

	```
	<span v-bind:title="message"> text </span>
	```

- directives
	- prefixed with v-
	- apply special reactive behavior to the rendered DOM

- conditionals
	- use v-if, v-else
	```
	<div id="app">
		<span v-if="seen"> You've seen me </span>
		<span v-else="!seen">You haven't seen me </span>
	</div>

- loops
	= use v-for
	```
	<div id="app-4">
	  <ol>
	    <li v-for="todo in todos">
	      {{ todo.text }}
	    </li>
	  </ol>
	</div>
	```

- handling user input
	- use the v-on directive to attach event listeners that invoke methods on our Vue instance
	```
	<div id="app-5">
	  <p>{{ message }}</p>
	  <button v-on:click="reverseMessageFunction">Reverse Message</button>
	</div>
	```

	- 2-way binding
		- use v-model
		```
		<div id="app-6">
		  <p>{{ message }}</p>
		  <input v-model="message">
		</div>
		```

- Composing with Components
	- Basic example
	```
	Vue.component('todo-item', {
	  // The todo-item component now accepts a
	  // "prop", which is like a custom attribute.
	  // This prop is called todo.
	  props: ['todo'],
	  template: '<li>{{ todo.text }}</li>'
	})
	```

The Vue Instance
	- Every Vue application starts by creating a new Vue instance with the Vue function

	```
	const vm = new Vue({})
	```

	- all components are vue instances
	- The Vue instance is just a nest of vue instances (components)

Instance Lifecycle Hooks
	- created
		- used to run code after an instance is created
		```
		new Vue({
		  data: {
		    a: 1
		  },
		  created: function () {
		    // `this` points to the vm instance
		    console.log('a is: ' + this.a)
		  }
		})
		// => "a is: 1"
		```

	- mounted
	- updated
	- destroyed

	- Lifecycle Diagram
		- beforeCreate -> created -> beforeMount -> mounted -> beforeUpdated + updated(loop) -> destroyed

Template Syntax
	- HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue Instance's data
	- Compiles tempalte to virtual DOM

Interpolations
	- use {{}} for text interpolation
	```
	<span>Message: {{ msg }}</span>
	```

	- use v-html directive to render raw html

Using Javascript Expressions
	- supports javascript expressions inside all data bindings
	```
	{{ number + 1 }}

	{{ ok ? 'YES' : 'NO' }}

	{{ message.split('').reverse().join('') }}

	<div v-bind:id="'list-' + id"></div>
	```

Directive Modifiers
	- modifiers are special postfixes denoted by a dot which indicate that a directive should be bound in some special way
	```
	<form v-on:submit.prevent="onSubmit"> ... </form>
	```

Directive Shorthand
	- v-bind == :attribute

	- v-on = @eventtype

Computed Properties and Watchers
	- use a computed method to pre-calculate complex logic
	- example compute the reverse of a string
	```
	var vm = new Vue({
	  el: '#example',
	  data: {
	    message: 'Hello'
	  },
	  computed: {
	    // a computed getter
	    reversedMessage: function () {
	      // `this` points to the vm instance
	      return this.message.split('').reverse().join('')
	    }
	  }
	})
	```

Computed Caching vs Methods
	- Could easily achieve the same result by calling reverseString method rather than created a computed property
	- computed properties are cached and will only re-evaluate when some of its reactive dependencies have changed
	- Method invocations will always run the function whenever a re-render happens

Computed vs Watch Property
	- watch properties are a more generic way to observe and react to data changes on a vue instance
	- Often better to use computed than watch

Computed Setters
	- computed can be used to set it's reactive dependencies

	```
	// ...
	computed: {
	  fullName: {
	    // getter
	    get: function () {
	      return this.firstName + ' ' + this.lastName
	    },
	    // setter
	    set: function (newValue) {
	      var names = newValue.split(' ')
	      this.firstName = names[0]
	      this.lastName = names[names.length - 1]
	    }
	  }
	}
	// ...
	```

Watchers
	- useful when you want to perform async or expensive operations in response to changing data


Class and Style Bindings
	- v-bind:class to dynamically toggle classes
	```
	<div v-bind:class="{ active: isActive }"></div>
	```
		- this syntax means the presence of the active class will be determined by the truthiness of the data property isActive
		- Can have multiple classes toggled by having more fields in the object
	- can use ternary expression to bind classes
	```
	<div v-bind:class="[isActive ? activeClass : '', errorClass]"></div>
	```

Conditional Rendering
	- v-if is used to conditionally render a block
	- this block will only be rendered if the directive's expression returns a truthy value
	- can also add an "else" block with v-else
	```
	<h1 v-if="awesome">Vue is awesome!</h1>
	<h1 v-else>Oh no ðŸ˜¢</h1>
	```

	- v-else-if serves as an else if block for v-if
	- can be chained multiple times
	```
	<div v-if="type === 'A'">
	  A
	</div>
	<div v-else-if="type === 'B'">
	  B
	</div>
	<div v-else-if="type === 'C'">
	  C
	</div>
	<div v-else>
	  Not A/B/C
	</div>
	```

	- use a key attribute to separate similar elements
	```
	<template v-if="loginType === 'username'">
	  <label>Username</label>
	  <input placeholder="Enter your username" key="username-input">
	</template>
	<template v-else>
	  <label>Email</label>
	  <input placeholder="Enter your email address" key="email-input">
	</template>
	```

	- v-show will make an element always be rendered and remain in the DOM
	- toggles the display css property

	- v-if vs v-show
		- v-if is a real conditional and is lazy
		- use v-if if the condition is unlikely to change at runtime
		- use v-show if the condition is more likely to change

List Rendering
	- v-for directive to render a list of items based on an array
	```
	<ul id="example-1">
	  <li v-for="item in items" :key="item.message">
	    {{ item.message }}
	  </li>
	</ul>
	```

	- v-for also has full access to parent scope properties
	```
	<ul id="example-2">
	  <li v-for="(item, index) in items">
	    {{ parentMessage }} - {{ index }} - {{ item.message }}
	  </li>
	</ul>
	```

	- can also use v-for to iterate through an object
	```
	<ul id="v-for-object" class="demo">
	  <li v-for="value in object">
	    {{ value }}
	  </li>
	</ul>
	```

	- ideally recommended to always use a key attribute whenever rendering a list

Event Handling
	- use the v-on directive to bind an event listener
	- to bind an onclick event, use v-on:click="function"
	```
	<div id="example-3">
	  <button v-on:click="say('hi')">Say hi</button>
	  <button v-on:click="say('what')">Say what</button>
	</div>

	<button v-on:click="warn('Form cannot be submitted yet.', $event)">
	  Submit
	</button>
	```

	- Event Modifiers
		- common event modififers
			- .stop
			- .prevent
			- .capture
			- .self
			- .once
			- .passive

			```
			<!-- the click event's propagation will be stopped -->
			<a v-on:click.stop="doThis"></a>

			<!-- the submit event will no longer reload the page -->
			<form v-on:submit.prevent="onSubmit"></form>

			<!-- modifiers can be chained -->
			<a v-on:click.stop.prevent="doThat"></a>

			<!-- just the modifier -->
			<form v-on:submit.prevent></form>

			<!-- use capture mode when adding the event listener -->
			<!-- i.e. an event targeting an inner element is handled here before being handled by that element -->
			<div v-on:click.capture="doThis">...</div>

			<!-- only trigger handler if event.target is the element itself -->
			<!-- i.e. not from a child element -->
			<div v-on:click.self="doThat">...</div>
			```

		- event modifiers for key presses
		```
		<!-- only call `vm.submit()` when the `key` is `Enter` -->
		<input v-on:keyup.enter="submit">
		<input v-on:keyup.13="submit">
		```

Form Input Bindings
	- use v-model to create two-way data bindings on form input, textarea, and select elements.
	- can use v-model to bind radio buttons to ararys

	```
	<input type="checkbox" id="jack" value="Jack" v-model="checkedNames">
	<label for="jack">Jack</label>
	<input type="checkbox" id="john" value="John" v-model="checkedNames">
	<label for="john">John</label>
	<input type="checkbox" id="mike" value="Mike" v-model="checkedNames">
	<label for="mike">Mike</label>
	<br>
	<span>Checked names: {{ checkedNames }}</span>

	new Vue({
	  el: '...',
	  data: {
	    checkedNames: []
	  }
	})
	```

	- use .lazy modifier to sync data only after a change event


Components
	- Basic Example
	```
	// Define a new component called button-counter
	Vue.component('button-counter', {
	  data: function () {
	    return {
	      count: 0
	    }
	  },
	  template: '<button v-on:click="count++">You clicked me {{ count }} times.</button>'
	})

	new Vue({ el: '#components-demo' })
	```
	- Components are reusable vue instances
	- Each component maintains it's own state
	- in a component, the data must return a function
	```
	data: function () {
	  return {
	    count: 0
	  }
	}
	```

	- Passing data to child components with props
		- props are custom attributes you can register on a component. Pass data from parent to child
		```
		<blog-post title="My journey with Vue"></blog-post>

		Vue.component('blog-post', {
		  props: ['title'],
		  template: '<h3>{{ title }}</h3>'
		})

	- emit events from child to parent using $emit

	```
	// child
	<button v-on:click="$emit('enlarge-text')">
	  Enlarge text
	</button>

	// parent
	<blog-post
	  ...
	  v-on:enlarge-text="postFontSize += 0.1"
	></blog-post>